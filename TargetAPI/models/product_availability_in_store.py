# generated by datamodel-codegen:
#   filename:  data.json
#   timestamp: 2022-08-30T23:17:21+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel


class Category(BaseModel):
    parent_category_id: Optional[str]


class Distribution(BaseModel):
    rating1: Optional[int]
    rating2: Optional[int]
    rating3: Optional[int]
    rating4: Optional[int]
    rating5: Optional[int]


class SecondaryAverage(BaseModel):
    id: Optional[str]
    label: Optional[str]
    range: Optional[int]
    type: Optional[str]
    value: Optional[float]
    selector_text: Optional[str] = None


class Rating(BaseModel):
    average: Optional[float]
    count: Optional[int]
    distribution: Optional[Distribution]
    secondary_averages: Optional[List[SecondaryAverage]]


class Statistics(BaseModel):
    not_recommended_count: Optional[int]
    question_count: Optional[int]
    rating: Optional[Rating]
    recommended_count: Optional[int]
    recommended_percentage: Optional[int]
    review_count: Optional[int]


class Author(BaseModel):
    nickname: Optional[str]
    external_id: Optional[str]


class Rating1(BaseModel):
    value: Optional[int]
    submitted_at: Optional[str]


class MostRecentItem(BaseModel):
    id: Optional[str]
    text: Optional[str]
    author: Optional[Author]
    title: Optional[str]
    rating: Optional[Rating1]


class RatingsAndReviews(BaseModel):
    has_verified: Optional[bool]
    statistics: Optional[Statistics]
    most_recent: Optional[List[MostRecentItem]]


class XvItem(BaseModel):
    xt: Optional[str]


class ExperimentsViewed(BaseModel):
    xv: Optional[List[XvItem]]


class Availability(BaseModel):
    is_shipping_available: Optional[bool]
    is_shipping_loyalty_available: Optional[bool]
    is_scheduled_delivery_available: Optional[bool]
    is_primary_store_available: Optional[bool]
    is_backup_store_available: Optional[bool]
    is_digital_options_available: Optional[bool]


class Fulfillment(BaseModel):
    is_shipping_available: Optional[bool]
    is_shipping_loyalty_available: Optional[bool]
    is_scheduled_delivery_available: Optional[bool]
    is_primary_store_available: Optional[bool]
    is_backup_store_available: Optional[bool]
    is_digital_options_available: Optional[bool]


class Availability1(BaseModel):
    is_shipping_available: Optional[bool]
    is_shipping_loyalty_available: Optional[bool]
    is_scheduled_delivery_available: Optional[bool]
    is_primary_store_available: Optional[bool]
    is_backup_store_available: Optional[bool]
    is_digital_options_available: Optional[bool]


class Fulfillment1(BaseModel):
    is_shipping_available: Optional[bool]
    is_shipping_loyalty_available: Optional[bool]
    is_scheduled_delivery_available: Optional[bool]
    is_primary_store_available: Optional[bool]
    is_backup_store_available: Optional[bool]
    is_digital_options_available: Optional[bool]


class Availability2(BaseModel):
    is_shipping_available: Optional[bool]
    is_shipping_loyalty_available: Optional[bool]
    is_scheduled_delivery_available: Optional[bool]
    is_primary_store_available: Optional[bool]
    is_backup_store_available: Optional[bool]
    is_digital_options_available: Optional[bool]


class Fulfillment2(BaseModel):
    is_shipping_available: Optional[bool]
    is_shipping_loyalty_available: Optional[bool]
    is_scheduled_delivery_available: Optional[bool]
    is_primary_store_available: Optional[bool]
    is_backup_store_available: Optional[bool]
    is_digital_options_available: Optional[bool]


class VariationHierarchyItem2(BaseModel):
    name: Optional[str]
    value: Optional[str]
    tcin: Optional[str]
    buy_url: Optional[str]
    swatch_image_url: Optional[str]
    primary_image_url: Optional[str]
    availability: Optional[Availability2]
    fulfillment: Optional[Fulfillment2]


class VariationHierarchyItem1(BaseModel):
    name: Optional[str]
    value: Optional[str]
    availability: Optional[Availability1]
    fulfillment: Optional[Fulfillment1]
    variation_hierarchy: Optional[List[VariationHierarchyItem2]]


class VariationHierarchyItem(BaseModel):
    name: Optional[str]
    value: Optional[str]
    availability: Optional[Availability]
    fulfillment: Optional[Fulfillment]
    variation_hierarchy: Optional[List[VariationHierarchyItem1]]


class ShoppableInImageItem(BaseModel):
    tcin: Optional[str]


class ModelMetadatum(BaseModel):
    height: Optional[str]
    size_as_worn: Optional[str]


class ContentLabel(BaseModel):
    image_url: Optional[str]
    shoppable_in_image: Optional[List[ShoppableInImageItem]] = None
    model_metadata: Optional[List[ModelMetadatum]] = None


class Images(BaseModel):
    base_url: Optional[str]
    primary_image_url: Optional[str]
    primary_image: Optional[str]
    swatch_image_url: Optional[str]
    swatch_image: Optional[str]
    alternate_images: List[str]
    alternate_image_urls: List[str]
    content_labels: Optional[List[ContentLabel]]


class ReturnPolicy(BaseModel):
    user_type: Optional[str]
    day_count: Optional[int]


class Enrichment(BaseModel):
    buy_url: Optional[str]
    images: Optional[Images]
    size_chart_fragment_url: Optional[str]
    return_policies: Optional[List[ReturnPolicy]]


class Handling(BaseModel):
    import_designation_description: Optional[str]


class MerchandiseClassification(BaseModel):
    class_id: Optional[int]
    department_id: Optional[int]
    department_name: Optional[str]


class PrimaryBrand(BaseModel):
    canonical_url: Optional[str]
    linking_id: Optional[str]
    name: Optional[str]


class SoftBullets(BaseModel):
    bullets: Optional[List[str]]
    title: Optional[str]


class ProductDescription(BaseModel):
    bullet_descriptions: Optional[List[str]]
    downstream_description: Optional[str]
    soft_bullet_description: Optional[str]
    soft_bullets: Optional[SoftBullets]
    title: Optional[str]


class WellnessMerchandiseAttribute(BaseModel):
    parent_id: Optional[str]
    value_id: Optional[str]
    value_name: Optional[str]
    badge_url: Optional[str]
    wellness_description: Optional[str]


class Item(BaseModel):
    cart_add_on_threshold: Optional[int]
    enrichment: Optional[Enrichment]
    handling: Optional[Handling]
    merchandise_classification: Optional[MerchandiseClassification]
    primary_brand: Optional[PrimaryBrand]
    product_description: Optional[ProductDescription]
    relationship_type_code: Optional[str]
    return_policies_guest_message: Optional[str]
    shop_the_look: Optional[List[str]]
    wellness_merchandise_attributes: Optional[List[WellnessMerchandiseAttribute]]


class Image(BaseModel):
    url: Optional[str]
    alt_text: Optional[str]
    height: Optional[int]
    width: Optional[int]
    aspect_ratio: Optional[str]


class Image1(BaseModel):
    url: Optional[str]
    alt_text: Optional[str]
    height: Optional[int]
    width: Optional[int]
    aspect_ratio: Optional[str]


class FindsStory(BaseModel):
    id: Optional[str]
    channel_id: Optional[str]
    description: Optional[str]
    display_date: Optional[str]
    highlight_color: Optional[str]
    image: Optional[Image]
    images: Optional[List[Image1]]
    label: Optional[str]
    name: Optional[str]
    short_title: Optional[str]
    title: Optional[str]
    url: Optional[str]


class Price(BaseModel):
    formatted_current_price: Optional[str]
    formatted_current_price_type: Optional[str]
    formatted_comparison_price: Optional[str]
    formatted_comparison_price_type: Optional[str]
    location_id: Optional[int]
    is_current_price_range: Optional[bool]
    current_retail_min: Optional[float]
    reg_retail_max: Optional[float]
    reg_retail_min: Optional[float]


class Compliance(BaseModel):
    is_proposition_65: Optional[bool]


class AddOn(BaseModel):
    is_active: Optional[bool]


class EligibilityRules(BaseModel):
    add_on: Optional[AddOn]


class ShoppableInImageItem1(BaseModel):
    tcin: Optional[str]


class ModelMetadatum1(BaseModel):
    height: Optional[str]
    size_as_worn: Optional[str]


class ContentLabel1(BaseModel):
    image_url: Optional[str]
    shoppable_in_image: Optional[List[ShoppableInImageItem1]] = None
    model_metadata: Optional[List[ModelMetadatum1]] = None


class Images1(BaseModel):
    base_url: Optional[str]
    primary_image_url: Optional[str]
    primary_image: Optional[str]
    swatch_image_url: Optional[str]
    swatch_image: Optional[str]
    alternate_images: Optional[List[str]]
    alternate_image_urls: Optional[List[str]]
    content_labels: Optional[List[ContentLabel1]]


class ReturnPolicy1(BaseModel):
    user_type: Optional[str]
    day_count: Optional[int]


class Enrichment1(BaseModel):
    buy_url: Optional[str]
    images: Optional[Images1]
    size_chart_fragment_url: Optional[str]
    return_policies: Optional[List[ReturnPolicy1]]


class EnvironmentalSegmentation(BaseModel):
    is_hazardous_material: Optional[bool]


class Fulfillment3(BaseModel):
    is_gift_wrap_eligible: Optional[bool]
    purchase_limit: Optional[int]


class Handling1(BaseModel):
    import_designation_description: Optional[str]


class MerchandiseClassification1(BaseModel):
    class_id: Optional[int]
    department_id: Optional[int]
    department_name: Optional[str]


class PackageDimensions(BaseModel):
    depth: Optional[float]
    dimension_unit_of_measure: Optional[str]
    height: Optional[float]
    weight: Optional[float]
    weight_unit_of_measure: Optional[str]
    width: Optional[float]


class PrimaryBrand1(BaseModel):
    canonical_url: Optional[str]
    linking_id: Optional[str]
    name: Optional[str]


class SoftBullets1(BaseModel):
    bullets: Optional[List[str]]
    title: Optional[str]


class ProductDescription1(BaseModel):
    bullet_descriptions: Optional[List[str]]
    downstream_description: Optional[str]
    soft_bullet_description: Optional[str]
    soft_bullets: Optional[SoftBullets1]
    title: Optional[str]


class ProductVendor(BaseModel):
    id: Optional[str]
    vendor_name: Optional[str]


class WellnessMerchandiseAttribute1(BaseModel):
    parent_id: Optional[str]
    value_id: Optional[str]
    value_name: Optional[str]
    badge_url: Optional[str]
    wellness_description: Optional[str]


class Item1(BaseModel):
    cart_add_on_threshold: Optional[int]
    compliance: Compliance
    dpci: Optional[str]
    eligibility_rules: Optional[EligibilityRules]
    enrichment: Optional[Enrichment1]
    environmental_segmentation: Optional[EnvironmentalSegmentation]
    formatted_return_method: Optional[str]
    fulfillment: Optional[Fulfillment3]
    handling: Optional[Handling1]
    merchandise_classification: Optional[MerchandiseClassification1]
    package_dimensions: Optional[PackageDimensions]
    primary_barcode: Optional[str]
    primary_brand: Optional[PrimaryBrand1]
    product_description: Optional[ProductDescription1]
    product_vendors: Optional[List[ProductVendor]]
    relationship_type_code: Optional[str]
    return_policies_guest_message: Optional[str]
    shop_the_look: Optional[List[str]]
    wellness_merchandise_attributes: Optional[
        List[WellnessMerchandiseAttribute1]
    ] = None


class Price1(BaseModel):
    formatted_current_price: Optional[str]
    formatted_current_price_type: Optional[str]
    formatted_comparison_price: Optional[str]
    formatted_comparison_price_type: Optional[str]
    location_id: Optional[int]
    save_dollar: Optional[float]
    save_percent: Optional[int]
    current_retail: Optional[float]
    external_system_id: Optional[str]
    reg_retail: Optional[float]
    is_current_price_range: Optional[bool]


class Child(BaseModel):
    __typename: Optional[str]
    tcin: Optional[str]
    item: Optional[Item1]
    price: Optional[Price1]
    promotions: Optional[List]


class Product(BaseModel):
    __typename: Optional[str]
    tcin: Optional[str]
    category: Optional[Category]
    ratings_and_reviews: Optional[RatingsAndReviews]
    experiments_viewed: Optional[ExperimentsViewed]
    variation_hierarchy: Optional[List[VariationHierarchyItem]]
    item: Optional[Item]
    finds_stories: Optional[List[FindsStory]]
    price: Optional[Price]
    promotions: Optional[List]
    children: Optional[List[Child]]


class Data(BaseModel):
    product: Optional[Product]


class Model(BaseModel):
    data: Optional[Data]
